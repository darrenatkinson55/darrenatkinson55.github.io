---
import type { LeaderboardEntry } from "../lib/leaderboard";

interface Props {
  entries: LeaderboardEntry[];
}

const { entries } = Astro.props;

const highestScore = Math.max(
  ...entries.map((entry) => parseFloat(entry.webVoyager.score.replace("%", "")))
);
---

<div class="flex flex-col w-full">
  <div class="font-mono border border-text border-opacity-30 max-w-4xl w-full">
    <div class="bg-[var(--color-text)] p-[0.62rem] flex w-full items-center gap-[0.62rem]">
      <div class="bg-text text-black font-bold">LEADERBOARD</div>
      <div class="flex flex-col gap-1 flex-1">
        {[0, 1, 2, 3, 4].map((index) => <div class="bg-black h-[0.0625rem] w-full" />)}
      </div>
    </div>

    <div class="overflow-x-auto md:overflow-visible">
      <div class="min-w-[800px] md:min-w-0">
        <div class="text-text pt-4 pb-2 px-3">
          <div
            class="grid grid-cols-[0.5fr_1fr_1fr_1.5fr] md:grid-cols-[0.5fr_2fr_1fr_1.5fr] gap-2 w-full"
          >
            <div>RANK</div>
            <div>AGENT</div>
            <div class="flex items-center gap-1">WEB VOYAGER</div>
            <div>ORGANIZATION</div>
          </div>
        </div>

        <div class="space-y-2 pb-4 px-3" id="entries-container">
          {
            entries.map((entry, index) => {
              const isSota = parseFloat(entry.webVoyager.score.replace("%", "")) === highestScore;
              const rank = index + 1; // Calculate rank based on array index
              let medal = "";
              if (rank === 1) {
                medal = "ðŸ¥‡";
              } else if (rank === 2) {
                medal = "ðŸ¥ˆ";
              } else if (rank === 3) {
                medal = "ðŸ¥‰";
              }
              return (
                <div class="grid grid-cols-[0.5fr_1fr_1fr_1.5fr] md:grid-cols-[0.5fr_2fr_1fr_1.5fr] gap-2 hover:bg-text hover:bg-opacity-5 transition-colors duration-200 w-full">
                  <div class="text-text">{medal}{rank}</div>
                  <div class="text-text uppercase flex flex-wrap items-start">
                    <div class="flex items-center gap-2">
                      <a
                        href={entry.homepage}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="hover:text-accent hover:underline transition-colors"
                      >
                        {entry.agent}
                      </a>
                      {entry.github && (
                        <a
                          href={entry.github}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="text-xs text-dim hover:text-accent transition-colors flex items-center gap-1"
                          title="View on GitHub"
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="12"
                            height="12"
                            id="Discord-Logo"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                          >
                            <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22" />
                          </svg>
                        </a>
                      )}
                      {entry.isNew && (
                         <span class="ml-2 text-xs flex px-[0.625rem] py-[0.25rem] justify-center items-center gap-[0.625rem] rounded-[62.5rem] border border-orange-500 leading-none">
                          NEW
                        </span>
                      )}
                    </div>
                  </div>
                  <div class="flex items-center gap-2">
                    <a
                      href={entry.webVoyager.source}
                      target="_blank"
                      rel="noopener noreferrer"
                      class={`${entry.webVoyager.score === "N/A" ? "text-dim" : parseInt(entry.webVoyager.score.replace("%", "")) < 50 ? "text-error" : "text-success"} hover:text-accent hover:underline transition-colors`}
                    >
                      {entry.webVoyager.score}
                    </a>
                    {isSota && (
                      <span class="ml-2 text-xs text-accent flex px-[0.625rem] py-1 justify-center items-center gap-[0.25rem] rounded-[62.5rem] border border-[#03FF32]">
                        <span class="flex items-center text-[0.5625rem]">â–²</span>
                        <span>SOTA</span>
                      </span>
                    )}
                  </div>
                  <div class="text-text">{entry.organization}</div>
                </div>
              );
            })
          }
        </div>
      </div>
    </div>
  </div>

  <div
    class="p-3 border border-text border-opacity-30 bg-background bg-opacity-50 mt-4 max-w-4xl w-full"
  >
    <div class="flex items-start gap-4">
      <p class="text-text">
        <a
          href="https://steel.dev"
          class="hover:opacity-80 underline hover:text-white transition-all">STEEL.DEV</a
        >: STEEL IS AN OPEN-SOURCE BROWSER API PURPOSE-BUILT FOR AI AGENTS.
      </p>
    </div>
  </div>
</div>
